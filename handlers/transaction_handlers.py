from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CommandHandler
from models.transaction import Transaction, Category
from services.transaction_service import TransactionService

# States for ConversationHandler
GET_AMOUNT, GET_CATEGORY, ADD_INCOME_CATEGORY, ADD_EXPENSE_CATEGORY, SETTINGS_MENU, DELETE_CATEGORY = range(6)

def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚ûï –î–æ—Ö–æ–¥"), KeyboardButton("‚ûñ –†–∞—Å—Ö–æ–¥")],
        [KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"), KeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ], resize_keyboard=True)

def cancel_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ], resize_keyboard=True)

def categories_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–æ–≤")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤")],
        [KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ], resize_keyboard=True)

def get_category_keyboard(user_id: int, transaction_type: str) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π."""
    categories = TransactionService.get_categories(user_id, transaction_type)
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category in categories:
        keyboard.append([KeyboardButton(category)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ç–º–µ–Ω—ã
    keyboard.append([KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")])
    keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def settings_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–æ—Ö–æ–¥—ã")],
        [KeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã")],
        [KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤")],
        [KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")],
        [KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

def category_selection_keyboard(user_id: int, category_type: str):
    categories = TransactionService.get_categories(user_id, category_type)
    keyboard = []
    
    for category in categories:
        keyboard.append([KeyboardButton(category)])
    
    keyboard.append([KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí∞ <b>–ë–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )

async def add_income(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['transaction_type'] = 'income'
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:",
        reply_markup=cancel_keyboard()
    )
    return GET_AMOUNT

async def add_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['transaction_type'] = 'expense'
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=cancel_keyboard()
    )
    return GET_AMOUNT

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler.END

async def get_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    try:
        amount = float(update.message.text)
        if amount <= 0:
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")
            return GET_AMOUNT

        context.user_data['amount'] = amount
        user_id = update.message.from_user.id
        transaction_type = context.user_data['transaction_type']
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = get_category_keyboard(user_id, transaction_type)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é:",
            reply_markup=keyboard
        )
        return GET_CATEGORY
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
        return GET_AMOUNT

async def get_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    user_id = update.message.from_user.id
    transaction_type = context.user_data['transaction_type']
    amount = context.user_data['amount']
    category = update.message.text

    if category == "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é":
        context.user_data['amount'] = amount  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if transaction_type == 'income':
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤:",
                reply_markup=cancel_keyboard()
            )
            return ADD_INCOME_CATEGORY
        else:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:",
                reply_markup=cancel_keyboard()
            )
            return ADD_EXPENSE_CATEGORY

    transaction = Transaction(
        user_id=user_id,
        type=transaction_type,
        amount=amount,
        category=category
    )
    TransactionService.add_transaction(transaction)

    await update.message.reply_text(
        f"‚úÖ {'–î–æ—Ö–æ–¥' if transaction_type == 'income' else '–†–∞—Å—Ö–æ–¥'} "
        f"–Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
        f"{' (–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ' + category + ')' if category else ''}",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler.END

async def skip_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    transaction_type = context.user_data['transaction_type']
    amount = context.user_data['amount']

    transaction = Transaction(
        user_id=user_id,
        type=transaction_type,
        amount=amount
    )
    TransactionService.add_transaction(transaction)

    await update.message.reply_text(
        f"‚úÖ {'–î–æ—Ö–æ–¥' if transaction_type == 'income' else '–†–∞—Å—Ö–æ–¥'} "
        f"–Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=main_menu_keyboard()
    )
    return ConversationHandler.END

async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    balance = TransactionService.get_balance(user_id)
    await update.message.reply_text(
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance:.2f} —Ä—É–±.</b>",
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    stats = TransactionService.get_monthly_stats(user_id)
    category_stats = TransactionService.get_category_stats(user_id)

    message = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü</b>\n\n"
        f"–î–æ—Ö–æ–¥—ã: <b>{stats.total_income:.2f} —Ä—É–±.</b>\n"
        f"–†–∞—Å—Ö–æ–¥—ã: <b>{stats.total_expense:.2f} —Ä—É–±.</b>\n"
        f"–ë–∞–ª–∞–Ω—Å: <b>{stats.balance:.2f} —Ä—É–±.</b>\n\n"
    )

    if category_stats['income_by_category']:
        message += "<b>–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        for category, amount in category_stats['income_by_category'].items():
            message += f"‚Ä¢ {category}: {amount:.2f} —Ä—É–±.\n"

    if category_stats['expense_by_category']:
        message += "\n<b>–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
        for category, amount in category_stats['expense_by_category'].items():
            message += f"‚Ä¢ {category}: {amount:.2f} —Ä—É–±.\n"

    await update.message.reply_text(
        message,
        reply_markup=main_menu_keyboard(),
        parse_mode="HTML"
    )

async def categories_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>",
        reply_markup=categories_keyboard(),
        parse_mode="HTML"
    )

async def add_income_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤:",
        reply_markup=cancel_keyboard()
    )
    return ADD_INCOME_CATEGORY

async def add_expense_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:",
        reply_markup=cancel_keyboard()
    )
    return ADD_EXPENSE_CATEGORY

async def handle_new_income_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    user_id = update.message.from_user.id
    category_name = update.message.text.strip()
    amount = context.user_data.get('amount')

    category = Category(
        user_id=user_id,
        name=category_name,
        type='income'
    )
    TransactionService.add_category(category)

    if amount is not None:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction = Transaction(
            user_id=user_id,
            type='income',
            amount=amount,
            category=category_name
        )
        TransactionService.add_transaction(transaction)
        
        await update.message.reply_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤ '{category_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"–î–æ—Ö–æ–¥ –Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    else:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        await update.message.reply_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤ '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=categories_keyboard()
        )
        return ConversationHandler.END

async def handle_new_expense_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    user_id = update.message.from_user.id
    category_name = update.message.text.strip()
    amount = context.user_data.get('amount')

    category = Category(
        user_id=user_id,
        name=category_name,
        type='expense'
    )
    TransactionService.add_category(category)

    if amount is not None:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction = Transaction(
            user_id=user_id,
            type='expense',
            amount=amount,
            category=category_name
        )
        TransactionService.add_transaction(transaction)
        
        await update.message.reply_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ '{category_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"–†–∞—Å—Ö–æ–¥ –Ω–∞ —Å—É–º–º—É {amount:.2f} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    else:
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        await update.message.reply_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ '{category_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=categories_keyboard()
        )
        return ConversationHandler.END

async def show_all_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    income_categories = TransactionService.get_categories(user_id, 'income')
    expense_categories = TransactionService.get_categories(user_id, 'expense')

    message = "üìã <b>–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n\n"
    
    if income_categories:
        message += "<b>–î–æ—Ö–æ–¥—ã:</b>\n"
        for category in income_categories:
            message += f"‚Ä¢ {category}\n"
    
    if expense_categories:
        message += "\n<b>–†–∞—Å—Ö–æ–¥—ã:</b>\n"
        for category in expense_categories:
            message += f"‚Ä¢ {category}\n"
    
    if not income_categories and not expense_categories:
        message += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π."

    await update.message.reply_text(
        message,
        reply_markup=categories_keyboard(),
        parse_mode="HTML"
    )

async def settings_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚öô <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=settings_keyboard(),
        parse_mode="HTML"
    )
    return SETTINGS_MENU

async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    action = update.message.text

    if action == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END

    if action == "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–æ—Ö–æ–¥—ã":
        TransactionService.clear_transactions(user_id, 'income')
        await update.message.reply_text(
            "‚úÖ –í—Å–µ –¥–æ—Ö–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!",
            reply_markup=settings_keyboard()
        )
        return SETTINGS_MENU

    if action == "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã":
        TransactionService.clear_transactions(user_id, 'expense')
        await update.message.reply_text(
            "‚úÖ –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!",
            reply_markup=settings_keyboard()
        )
        return SETTINGS_MENU

    if action == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤":
        categories = TransactionService.get_categories(user_id, 'income')
        if not categories:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=settings_keyboard()
            )
            return SETTINGS_MENU
        
        context.user_data['category_type'] = 'income'
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=category_selection_keyboard(user_id, 'income')
        )
        return DELETE_CATEGORY

    if action == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤":
        categories = TransactionService.get_categories(user_id, 'expense')
        if not categories:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=settings_keyboard()
            )
            return SETTINGS_MENU
        
        context.user_data['category_type'] = 'expense'
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=category_selection_keyboard(user_id, 'expense')
        )
        return DELETE_CATEGORY

async def handle_category_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            reply_markup=settings_keyboard()
        )
        return SETTINGS_MENU

    user_id = update.message.from_user.id
    category_name = update.message.text
    category_type = context.user_data['category_type']

    if TransactionService.delete_category(user_id, category_name, category_type):
        await update.message.reply_text(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=settings_keyboard()
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            reply_markup=settings_keyboard()
        )
    return SETTINGS_MENU

def get_handlers():
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^‚ûï –î–æ—Ö–æ–¥$"), add_income),
            MessageHandler(filters.Regex("^‚ûñ –†–∞—Å—Ö–æ–¥$"), add_expense),
            MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–æ–≤$"), add_income_category),
            MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤$"), add_expense_category),
            MessageHandler(filters.Regex("^üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏$"), show_all_categories),
            MessageHandler(filters.Regex("^‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏$"), settings_menu)
        ],
        states={
            GET_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_amount),
                MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), cancel)
            ],
            GET_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_category),
                MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), cancel)
            ],
            ADD_INCOME_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_new_income_category),
                MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), cancel)
            ],
            ADD_EXPENSE_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_new_expense_category),
                MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), cancel)
            ],
            SETTINGS_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings),
                MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), cancel)
            ],
            DELETE_CATEGORY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_category_deletion),
                MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), cancel)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    return [
        CommandHandler("start", start),
        conv_handler,
        MessageHandler(filters.Regex("^üí∞ –ë–∞–ª–∞–Ω—Å$"), show_balance),
        MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), show_stats),
        MessageHandler(filters.Regex("^üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏$"), categories_menu),
        MessageHandler(filters.Regex("^üîô –ù–∞–∑–∞–¥$"), start)
    ] 